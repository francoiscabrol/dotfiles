#!/bin/sh
exec scala -feature -savecompiled "$0" "$@"
!#

import java.io.File
import sys.process._
import scala.concurrent.ExecutionContext.Implicits.global
import concurrent.{Await, Future}
import scala.concurrent.duration._
import java.util.concurrent.TimeoutException
import scala.language.implicitConversions

def run(processBuilder: ProcessBuilder) = {
  val stdout = new StringBuilder
  val stderr = new StringBuilder
  val status = processBuilder ! ProcessLogger(stdout append _, stderr append _)
  (stdout.toString, stderr.toString)
}

class AnimatedWaitingMessage(message: String) {
  var i = 1

  val thread = new Thread {
    override def run {
      print(".")
      var done = true
      while(done) {
        try {
          Thread.sleep(1000)
          print(".")
          i += 1
        } catch {
          case _: Throwable => done = false
        }
      }
    }
  }

  def show = {
    print(message)
    thread.start
    this
  }

  def hide {
    thread.interrupt()
    print("\r" + " " * (message.length + i) + "\r")
  }
}

object Out {
  var waitingMessage:Option[AnimatedWaitingMessage] = None

  def startWait(message:String) = {
    stopWait
    waitingMessage = Some(new AnimatedWaitingMessage(message).show)
    this
  }
  def stopWait = {
    waitingMessage foreach(_.hide)
    this
  }
  def ln = {
    println
    this
  }
  def <(str:String) = {
    print(str)
    this
  }
  def <<(str:String) = {
    print(str)
    this
  }
}

object Git {
  def branch(dir: File) = {
    run(Process("git branch", dir) #| "grep \\*")
  }
  def status(dir: File) = {
    run(Process("git fetch", dir))
    run(Process("git status", dir))
  }
  def pull(dir: File) = {
    run(Process("git pull", dir))
  }
}

object Gstatus {

  val timeout = 60.seconds

  implicit class stringColors(val s: String) {
    import Console._

    def red = RED + s + RESET
    def green = GREEN + s + RESET
    def blue = BLUE + s + RESET
  }

  implicit class FileDecored(file: File) {
    def listDirectories: List[File] = file.listFiles.filter(_.isDirectory).toList
    def isGitRepo: Boolean = file.listFiles.exists(f => f.getName == ".git")
  }

  implicit def tupleToString(t: Tuple2[String, String]):String = t.productIterator.mkString

  def gitStatus(dir: File): String = Git.status(dir).productIterator.mkString match {
      case x if x.contains("not staged") => "Need to stage files".red
      case x if x.contains("up-to-date") => "Up to date"
      case x if x.contains("git pull") => "Need to pull".blue
      case x if x.contains("nothing to commit") => "nothing to commit. Not synchonized with a remote"
      case "error" => "well... something unusual".red
      case x => x
    }

    case class Info(dir: File, branchName: String, status: String) {
      override def toString = (dir + "-" + branchName.blue + ": " + status.green)
    }

  def gitInformations(directories: List[File]): List[Info] = {
    val futures = directories map((dir) => {
        Future {
          val combinedFuture = for {
              r1 <- Future { gitStatus(dir) }
              r2 <- Future { Git.branch(dir).trim }
            } yield (r1, r2)
          val (state, branch) = Await.result(combinedFuture, timeout)
          Info(dir, branch, state)
        }
      })
    Await.result(Future.sequence(futures), timeout)
  }

  def main(args: Array[String]) {
    Out startWait "Finding the git repositories"
    var isPullOk = false
    if (args.length > 0) {
      isPullOk = (args(0) == "--pull")
    }
    val directories = new File(".").listDirectories.filter(!_.isHidden)
    val (gitRepos, notGitRepos) = directories.partition(_.isGitRepo)
    Out.stopWait
    notGitRepos foreach((dir) => {
        println(dir + ": Not a Git repo")
    })
    try {
      Out startWait "Getting information from the git repositories"
      val infos = gitInformations(gitRepos)
      Out.stopWait
      infos foreach((info) => {
        Out < info.toString
        if (isPullOk && info.status.contains("Need to pull")) {
          Out << " pulling... ".red
          Git.pull(info.dir)
          print("done".green)
        }
        Out.ln
      })
    } catch {
      case _: TimeoutException => Out.stopWait < "Timeout"
    }
  }
}

Gstatus.main(args)

